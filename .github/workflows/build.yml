name: Build Engines

on:
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit on the given branch to build"
        required: false
jobs:
  build-linux:
    name: "${{ matrix.target.name }} (on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }})"
    env:
      # default build config
      SQLITE_MAX_VARIABLE_NUMBER: 250000
      SQLITE_MAX_EXPR_DEPTH: 10000

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: "linux-arm64"
            image: "prismagraphql/build:linux-static-arm64"
            target_string: "--target aarch64-unknown-linux-musl"
            target_path: "aarch64-unknown-linux-musl"
            features_string: "--features vendored-openssl"
          - name: "linux-amd64"
            image: "prismagraphql/build:linux-static-x64"
            target_string: "--target x86_64-unknown-linux-musl"
            target_path: "x86_64-unknown-linux-musl"
            features_string: "--features vendored-openssl"
    steps:
      - name: Output link to real commit
        if: ${{ github.event.inputs.commit }}
        run: echo https://github.com/${{ github.repository }}/prisma-engines/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          # repository: prisma/prisma-engines
          ref: ${{ github.event.inputs.commit }}

      - uses: actions-rs/toolchain@stable

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target.name }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Construct Build Command
        id: construct_build_command
        env:
          TARGET_NAME: ${{ matrix.target.name }}
          IMAGE: ${{ matrix.target.image }}
          TARGET_STRING: ${{ matrix.target.target_string }}
          FEATURES_STRING: ${{ matrix.target.features_string }}
        run: |
          command="docker run \
            -e SQLITE_MAX_VARIABLE_NUMBER=250000 \
            -e SQLITE_MAX_EXPR_DEPTH=10000 \
            -e LIBZ_SYS_STATIC=1 \
            -w /root/build \
            -v \"$(pwd)\":/root/build \
            $IMAGE \
            bash -c \
              \" \
              rustup toolchain install stable \
              && cargo clean \
              && cargo build --release -p query-engine          --manifest-path query-engine/query-engine/Cargo.toml          $TARGET_STRING $FEATURES_STRING \
              && cargo build --release -p schema-engine-cli     --manifest-path schema-engine/cli/Cargo.toml                  $TARGET_STRING $FEATURES_STRING \
              \" \
            "
          if [[ -n "$TARGET_STRING" ]]; then
            command=$(echo "$command" | sed "s|cargo clean|cargo clean \&\& rustup target add $(echo $TARGET_STRING | awk '{print $NF}')|")
          fi
          echo "COMMAND=$command" >> "$GITHUB_OUTPUT"
      - name: Show Build Command
        env:
          COMMAND: ${{ steps.construct_build_command.outputs.COMMAND }}"
        run: echo "Build command is $COMMAND"

      - name: Execute Build command
        run: ${{ steps.construct_build_command.outputs.command }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target.name }}
          path: |
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/libquery_engine.dylib
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/query-engine
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/prisma-fmt
      - name: Gzip Artifacts
        run: |
          mkdir -p release
          gzip -cvk target/${{ matrix.target.target_path }}/release/schema-engine > release/${{ matrix.target.name }}-schema-engine.gz
          gzip -cvk target/${{ matrix.target.target_path }}/release/query-engine > release/${{ matrix.target.name }}-query-engine.gz
      - name: R2 Upload Action
        uses: fireboomio/r2-upload-action@v0.1.1
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: release
          destination-dir: ./${{github.sha}}

  build-darwin:
    name: "${{ matrix.target.name }} (on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }})"
    env:
      SQLITE_MAX_VARIABLE_NUMBER: 250000
      SQLITE_MAX_EXPR_DEPTH: 10000
      # minimum supported version of macOS
      # MACOSX_DEPLOYMENT_TARGET: 10.15
    runs-on: macos-13

    strategy:
      matrix:
        target:
          - name: "darwin-amd64"
            target_string: "--target x86_64-apple-darwin"
            target_path: "x86_64-apple-darwin"
          - name: "darwin-arm64"
            target_string: "--target aarch64-apple-darwin"
            target_path: "aarch64-apple-darwin"

    steps:
      - name: Output link to real commit
        if: ${{ github.event.inputs.commit }}
        run: echo ${{ github.repository }}/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Install toolchain
        run: |
          rustup target add ${{ matrix.target.target_path }}
          xcodebuild -showsdks

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-intel-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: |
          cargo build --release -p query-engine -p schema-engine-cli ${{ matrix.target.target_string }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target.name }}
          path: |
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/prisma-fmt
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/query-engine
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/libquery_engine.dylib
      - name: Gzip Artifacts
        run: |
          mkdir -p release
          gzip -cvk target/${{ matrix.target.target_path }}/release/schema-engine > release/${{ matrix.target.name }}-schema-engine.gz
          gzip -cvk target/${{ matrix.target.target_path }}/release/query-engine > release/${{ matrix.target.name }}-query-engine.gz
      - name: R2 Upload Action
        uses: fireboomio/r2-upload-action@v0.1.1
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: release
          destination-dir: ./${{github.sha}}

  build-windows:
    name: "${{ matrix.target.name }} (on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }})"
    env:
      SQLITE_MAX_VARIABLE_NUMBER: 250000
      SQLITE_MAX_EXPR_DEPTH: 10000
      RUSTFLAGS: "-C target-feature=+crt-static"
    runs-on: windows-latest

    strategy:
      matrix:
        target:
          - name: "windows-amd64"
            target_string: "--target x86_64-pc-windows-msvc"
            target_path: "x86_64-pc-windows-msvc"
    #          - name: "windows-arm64"
    #            target_string: '--target aarch64-pc-windows-msvc'
    #            target_path: 'aarch64-pc-windows-msvc'

    steps:
      - name: Output link to real commit
        if: ${{ github.event.inputs.commit }}
        run: echo ${{ github.repository }}/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Install toolchain
        run: |
          rustup target add ${{ matrix.target.target_path }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: cargo build --release -p query-engine -p schema-engine-cli ${{ matrix.target.target_string }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target.name }}
          path: |
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine.exe
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/query-engine.exe
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine.dll
      - name: Gzip Artifacts
        run: |
          mkdir -p release
          gzip -cvk target/${{ matrix.target.target_path }}/release/schema-engine.exe > release/${{ matrix.target.name }}-schema-engine.exe.gz
          gzip -cvk target/${{ matrix.target.target_path }}/release/query-engine.exe > release/${{ matrix.target.name }}-query-engine.exe.gz
      #- name: Tree files
      #  run: |
      #    tree target
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: R2 Upload Action
        uses: fireboomio/r2-upload-action@v1.2.4
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: release
          destination-dir: ./${{github.sha}}
